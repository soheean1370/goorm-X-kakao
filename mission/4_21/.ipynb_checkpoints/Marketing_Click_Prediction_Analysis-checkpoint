{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "5cd0cb91-6e61-49bc-b75c-f9abdfcbe829",
   "metadata": {},
   "source": [
    "# EDA"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "ff09518b-44a8-4797-95e8-5d8253011fec",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    Age  EstimatedSalary  Gender  Clicked\n",
      "0  30.0           121600    Male        0\n",
      "1  25.0            91400  Female        0\n",
      "2  45.0            97700    Male        1\n",
      "3  35.0            69700  Female        0\n",
      "4  35.0           149000    Male        0\n",
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 400 entries, 0 to 399\n",
      "Data columns (total 4 columns):\n",
      " #   Column           Non-Null Count  Dtype  \n",
      "---  ------           --------------  -----  \n",
      " 0   Age              400 non-null    float64\n",
      " 1   EstimatedSalary  400 non-null    int64  \n",
      " 2   Gender           400 non-null    object \n",
      " 3   Clicked          400 non-null    int64  \n",
      "dtypes: float64(1), int64(2), object(1)\n",
      "memory usage: 12.6+ KB\n",
      "None\n",
      "              Age  EstimatedSalary     Clicked\n",
      "count  400.000000       400.000000  400.000000\n",
      "mean    35.377500     98024.750000    0.397500\n",
      "std      8.588037     22324.739583    0.489994\n",
      "min     18.000000     20000.000000    0.000000\n",
      "25%     29.000000     80875.000000    0.000000\n",
      "50%     33.500000    101300.000000    0.000000\n",
      "75%     42.000000    114725.000000    1.000000\n",
      "max     60.000000    150000.000000    1.000000\n",
      "결측치 수:\n",
      " Age                0\n",
      "EstimatedSalary    0\n",
      "Gender             0\n",
      "Clicked            0\n",
      "dtype: int64\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "\n",
    "\n",
    "df = pd.read_csv(\"marketing_click_prediction_cleaned.csv\")\n",
    "\n",
    "print(df.head())\n",
    "print(df.info())\n",
    "print(df.describe())\n",
    "\n",
    "print(\"결측치 수:\\n\",df.isnull().sum())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "140fd4de-70d8-47d6-95c8-2f9f004c8496",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Gender → 숫자 인코딩\n",
    "df[\"Gender\"] = df[\"Gender\"].map({'Male':0, \"Female\":1})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "038d8acd-8ea1-4862-92bf-2d60195b17fa",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "# 피처와 타겍 설정\n",
    "X = df[['Age','EstimatedSalary','Gender']]\n",
    "y = df['Clicked']\n",
    "\n",
    "# 학습 테스트 데이터 분할 \n",
    "X_train, X_test, y_train, y_test = train_test_split(\n",
    "    X,y,test_size = 0.2, random_state= 42, stratify=y\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "ee205167-81e3-4f93-a1a6-a469f7482479",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 피처 스케일링\n",
    "scaler = StandardScaler()\n",
    "X_train = scaler.fit_transform(X_train)\n",
    "X_test = scaler.transform(X_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "71eb4e6a-cefe-4ca2-b0f1-e9d3266eb463",
   "metadata": {},
   "source": [
    "# 기본 모델 성능 비교"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "ef5ee369-512a-4c69-8695-ce94549becef",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Logistic Regression\n",
      "Confusion Matrix:\n",
      " [[48  0]\n",
      " [ 6 26]]\n",
      "Classification Report:\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.89      1.00      0.94        48\n",
      "           1       1.00      0.81      0.90        32\n",
      "\n",
      "    accuracy                           0.93        80\n",
      "   macro avg       0.94      0.91      0.92        80\n",
      "weighted avg       0.93      0.93      0.92        80\n",
      "\n",
      "\n",
      "K-Nearest Neighbors\n",
      "Confusion Matrix:\n",
      " [[47  1]\n",
      " [ 5 27]]\n",
      "Classification Report:\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.90      0.98      0.94        48\n",
      "           1       0.96      0.84      0.90        32\n",
      "\n",
      "    accuracy                           0.93        80\n",
      "   macro avg       0.93      0.91      0.92        80\n",
      "weighted avg       0.93      0.93      0.92        80\n",
      "\n",
      "\n",
      "Random Forest\n",
      "Confusion Matrix:\n",
      " [[46  2]\n",
      " [ 8 24]]\n",
      "Classification Report:\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.85      0.96      0.90        48\n",
      "           1       0.92      0.75      0.83        32\n",
      "\n",
      "    accuracy                           0.88        80\n",
      "   macro avg       0.89      0.85      0.86        80\n",
      "weighted avg       0.88      0.88      0.87        80\n",
      "\n"
     ]
    }
   ],
   "source": [
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.metrics import classification_report, confusion_matrix, accuracy_score, precision_score, recall_score, f1_score\n",
    "\n",
    "\n",
    "# 모델 선언\n",
    "models = {\n",
    "    \"Logistic Regression\": LogisticRegression(),\n",
    "    \"K-Nearest Neighbors\": KNeighborsClassifier(),\n",
    "    \"Random Forest\": RandomForestClassifier()\n",
    "}\n",
    "\n",
    "# 모델 학습 및 평가\n",
    "for name, model in models.items():\n",
    "    print(f\"\\n{name}\")\n",
    "    model.fit(X_train, y_train)\n",
    "    y_pred = model.predict(X_test)\n",
    "    print(\"Confusion Matrix:\\n\", confusion_matrix(y_test, y_pred))\n",
    "    print(\"Classification Report:\\n\", classification_report(y_test, y_pred))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f5004011-df2d-4149-b529-79df88076b43",
   "metadata": {},
   "source": [
    "# 교차검증"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "123a0f0f-07fb-45d5-bba4-2f805affdf57",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Logistic Regression - 평균 정확도: 0.9325, 표준편차: 0.0257\n",
      "K-Nearest Neighbors - 평균 정확도: 0.6025, 표준편차: 0.0659\n",
      "Random Forest - 평균 정확도: 0.9325, 표준편차: 0.0341\n"
     ]
    }
   ],
   "source": [
    "from sklearn.model_selection import cross_val_score\n",
    "\n",
    "for name,model in models.items():\n",
    "    scores = cross_val_score(model, X,y,cv=5)\n",
    "    print(f\"{name} - 평균 정확도: {scores.mean():.4f}, 표준편차: {scores.std():.4f}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "480554a0-1bc8-4897-b2ae-8cc0e95a8567",
   "metadata": {},
   "source": [
    "# Stratified-K-Fold"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "f5f4b4f1-0159-42f9-acdf-8a98254c3eb7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fold 1 정확도: 1.0000\n",
      "Fold 2 정확도: 0.9500\n",
      "Fold 3 정확도: 0.9250\n",
      "Fold 4 정확도: 0.8750\n",
      "Fold 5 정확도: 0.9250\n",
      "StratifiedKFold 평균 정확도: 0.9350\n"
     ]
    }
   ],
   "source": [
    "from sklearn.model_selection import StratifiedKFold\n",
    "import numpy as np\n",
    "\n",
    "skf = StratifiedKFold(n_splits=5, shuffle=True, random_state = 42)\n",
    "log_reg_model = LogisticRegression()\n",
    "accuracies = []\n",
    "\n",
    "for fold, (train_index, val_index) in enumerate(skf.split(X, y)):\n",
    "    X_train_fold, X_val_fold = X.iloc[train_index], X.iloc[val_index]\n",
    "    y_train_fold, y_val_fold = y.iloc[train_index], y.iloc[val_index]\n",
    "\n",
    " # 스케일링\n",
    "    X_train_scaled = scaler.fit_transform(X_train_fold)\n",
    "    X_val_scaled = scaler.transform(X_val_fold)\n",
    "\n",
    "    log_reg_model.fit(X_train_scaled, y_train_fold)\n",
    "    acc = log_reg_model.score(X_val_scaled, y_val_fold)\n",
    "    print(f\"Fold {fold+1} 정확도: {acc:.4f}\")\n",
    "    accuracies.append(acc)\n",
    "\n",
    "print(f\"StratifiedKFold 평균 정확도: {np.mean(accuracies):.4f}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "21dc652f-74cb-4570-b338-4a0c15b31d1b",
   "metadata": {},
   "source": [
    "- 장점: 클래스 비율 유지 → 불균형 데이터에서 유리\n",
    "- 단점: 구현 복잡도 증가 (하지만 sklearn이 잘 해결해줌)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a23ebfea-f7a3-4d1b-be58-6fefa20c94d7",
   "metadata": {},
   "source": [
    "# 하이퍼파라미터 튜닝 (GridSearchCV)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "52d73707-917c-481f-aaca-39dd586aaef3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "최적 하이퍼파라미터: {'max_depth': 5, 'n_estimators': 100}\n",
      "최고 교차검증 정확도: 0.95\n",
      "테스트셋 정확도: 0.9\n"
     ]
    }
   ],
   "source": [
    "from sklearn.model_selection import GridSearchCV\n",
    "\n",
    "param_grid = {\n",
    "    'n_estimators': [50, 100],\n",
    "    'max_depth': [None, 5, 10]\n",
    "}\n",
    "\n",
    "grid = GridSearchCV(RandomForestClassifier(), param_grid, cv=5, scoring='accuracy')\n",
    "grid.fit(X_train, y_train)\n",
    "\n",
    "print(\"최적 하이퍼파라미터:\", grid.best_params_)\n",
    "print(\"최고 교차검증 정확도:\", grid.best_score_)\n",
    "\n",
    "# 최적 모델로 테스트셋 평가\n",
    "best_rf = grid.best_estimator_\n",
    "print(\"테스트셋 정확도:\", best_rf.score(X_test, y_test))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2ade19c0-c501-4f8c-9c40-e92fe21aeb5a",
   "metadata": {},
   "source": [
    "# 최종 모델 및 보고서"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "f1f3c8ea-7554-4bfc-b17c-1923ff0faa03",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Confusion Matrix:\n",
      " [[48  0]\n",
      " [ 8 24]]\n",
      "ROC AUC Score: 0.9622\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from sklearn.metrics import roc_auc_score, roc_curve\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "y_pred = best_rf.predict(X_test)\n",
    "y_proba = best_rf.predict_proba(X_test)[:, 1]\n",
    "\n",
    "# confusion matrix\n",
    "print(\"Confusion Matrix:\\n\", confusion_matrix(y_test, y_pred))\n",
    "\n",
    "# ROC AUC Score\n",
    "auc_score = roc_auc_score(y_test, y_proba)\n",
    "print(f\"ROC AUC Score: {auc_score:.4f}\")\n",
    "\n",
    "# ROC Curve\n",
    "fpr, tpr, thresholds = roc_curve(y_test, y_proba)\n",
    "plt.figure(figsize=(8,6))\n",
    "plt.plot(fpr, tpr, label=f\"ROC Curve (AUC = {auc_score:.4f})\")\n",
    "plt.plot([0,1], [0,1], 'k--')\n",
    "plt.xlabel(\"False Positive Rate\")\n",
    "plt.ylabel(\"True Positive Rate\")\n",
    "plt.title(\"ROC Curve\")\n",
    "plt.legend()\n",
    "plt.grid()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c4a056f8-b58f-4cee-951e-282045e8a086",
   "metadata": {},
   "source": [
    "각 성능 지표가 실제 서비스에서 어떤 의미를 가지는지 기술해보세요.\n",
    "- Accuracy: 전체 예측 중 맞춘 비율. 데이터 불균형일 땐 의미 약함.\n",
    "\n",
    "- Precision: 클릭 예측 중 실제 클릭 비율. 마케팅 비용 줄이는 데 중요.\n",
    "\n",
    "- Recall: 실제 클릭한 사람 중 모델이 맞춘 비율. 광고 노출 놓치지 않으려면 중요.\n",
    "\n",
    "- F1-score: Precision이랑 Recall의 균형. 전체적인 성능 파악에 적합.\n",
    "\n",
    "- ROC AUC: 다양한 기준에서 모델 성능 비교. 캠페인 전략 세울 때 참고용."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [conda env:base] *",
   "language": "python",
   "name": "conda-base-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
